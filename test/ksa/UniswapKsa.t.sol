// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "forge-std/mocks/MockERC20.sol";
import {UniswapAnalyser, Commands} from "@/knightSafeAnalyser/UniswapAnalyser.sol";
import {ERC20Analyser} from "@/knightSafeAnalyser/ERC20Analyser.sol";
import "@/controlCenter/ControlCenter.sol";

contract UniswapAnalyserTest is Test {
    UniswapAnalyser ksa;
    ControlCenter controlCenter;

    address mockAddress = address(0x10001); // any address
    address mockNative = address(0x1111111111111); // any address
    address internal ownerAddress = address(this);

    function setUp() public {
        ksa = new UniswapAnalyser(mockNative, msg.sender);
        controlCenter = new ControlCenter(ownerAddress);
        IControlCenter(controlCenter).addOfficialAnalyser(address(ksa), "uni_0.1");

        assertEq(IControlCenter(controlCenter).isOfficialAnalyser(address(ksa)), true);
    }

    function test_function() public {
        // solhint-disable-next-line
        bytes memory data =
            hex"3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006669fef600000000000000000000000000000000000000000000000000000000000000020a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000066918ace0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ec8b0f7ffe3ae75d7ffab09429e3675bb63503e400000000000000000000000000000000000000000000000000000000666a04d600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000041e77e476845bc44cf3a388231258c853be16dd9b9dce53c3e948291813fedc69f4c3ec88f6df2c1477afbaa3e531014d04170ce74184d52cd0a405809c83713061c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000002cb41780000000000000000000000000000000000000000000000000000000002c7a8448c00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002baf88d065e77c8cc2239327c5edb3a432268e5831000064fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000";
        // bytes memory commands = getCommands(data);
        // console.logBytes(commands);

        (address[] memory addrList, uint256[] memory valueList) = ksa.extractAddressesWithValue(mockAddress, data);
        console.log(addrList.length);
        for (uint256 i = 0; i < addrList.length; i++) {
            console.log("addrList[", i, "]: ", addrList[i]);
            console.log("valueList[", i, "]: ", valueList[i]);
        }
    }

    function test_function1() public {
        // solhint-disable-next-line
        bytes memory data =
            hex"3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006669deb300000000000000000000000000000000000000000000000000000000000000030a000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001600000000000000000000000001c986661170c1834db49c3830130d4038eeeb866000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000667319330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ec8b0f7ffe3ae75d7ffab09429e3675bb63503e4000000000000000000000000000000000000000000000000000000006669deb300000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004108db68e89b06fbb06c9fee5e69e8ef16db91ff1268b24c90766cec4d0ae56464050965d14c336bc5fe7bd82d044f4a91f251e21cf4b4e978655992b9b56fa7541b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000bf182b30000000000000000000000000000000000000000000000000015addf06304e7500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b1c986661170c1834db49c3830130d4038eeeb86600271082af49447d8a07e3bd95bd0d56f35241523fbab100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000009a608d9f416518b5f11acf3dc5594c90d6998e2c0000000000000000000000000000000000000000000000000015addf06304e75";
        bytes4 selector = getSelector(data);

        (address[] memory addrList, uint256[] memory valueList) = ksa.extractAddressesWithValue(mockAddress, data);
        // console.log(addrList.length);

        for (uint256 i = 0; i < addrList.length; i++) {
            console.log("addrList[", i, "]: ", addrList[i]);
            console.log("valueList[", i, "]: ", valueList[i]);
        }
    }

    function test_decode() public {
        // solhint-disable-next-line
        bytes memory data =
            hex"3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000006669d95900000000000000000000000000000000000000000000000000000000000000020b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000b5e620f48000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000b5e620f480000000000000000000000000000000000000000000000000000000aefa27ac72e100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b82af49447d8a07e3bd95bd0d56f35241523fbab100006435751007a407ca6feffe80b3cb397736d2cf4dbe000000000000000000000000000000000000000000";

        bytes4 selector = getSelector(data);

        (address[] memory addrList, uint256[] memory valueList) = ksa.extractAddressesWithValue(mockAddress, data);

        for (uint256 i = 0; i < addrList.length; i++) {
            console.log("addrList[", i, "]: ", addrList[i]);
            console.log("valueList[", i, "]: ", valueList[i]);
        }
    }

    function test_function2() public {
        // solhint-disable-next-line
        bytes memory data =
            hex"3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000666bc58600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000a68d6a640000000000000000000000000000000000000000000008af8797c2e3505a378c00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000042ff970a61a04b1ca14834a43f5de4533ebddb5cc80001f482af49447d8a07e3bd95bd0d56f35241523fbab1000bb8afccb724e3aec1657fc9514e3e53a0e71e80622d000000000000000000000000000000000000000000000000000000000000";

        bytes4 selector = getSelector(data);

        (address[] memory addrList, uint256[] memory valueList) = ksa.extractAddressesWithValue(mockAddress, data);

        for (uint256 i = 0; i < addrList.length; i++) {
            console.log("addrList[", i, "]: ", addrList[i]);
            console.log("valueList[", i, "]: ", valueList[i]);
        }
    }

    function test_function3() public {
        // solhint-disable-next-line
        bytes memory data =
            hex"3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000066711f0600000000000000000000000000000000000000000000000000000000000000020a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000006698aac900000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e325eda8064b456f4781070c0738d849c82425800000000000000000000000000000000000000000000000000000000667124d100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000004104e4a4775202c0fb6e20bc39fb30671741d95835f54de62388c87df67534a7394e469bbd8d74aa4cd5a3ea36997d8247713bd4b7ea37c017a24afe9f8eccd9ad1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000001e5ead00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002baf88d065e77c8cc2239327c5edb3a432268e5831000064fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000000000000000000000";

        (address[] memory addrList, uint256[] memory valueList) = ksa.extractAddressesWithValue(mockAddress, data);

        for (uint256 i = 0; i < addrList.length; i++) {
            console.log("addrList[", i, "]: ", addrList[i]);
            console.log("valueList[", i, "]: ", valueList[i]);
        }
    }

    function getSelector(bytes memory data) public pure returns (bytes4 selector) {
        // solhint-disable-next-line no-inline-assembly
        assembly {
            selector := mload(add(data, add(0x20, 0)))
        }
    }

    function getCommands(bytes calldata data) public pure returns (bytes calldata commands) {
        // solhint-disable-next-line no-inline-assembly
        assembly {
            let dataOffset := add(data.offset, 4)

            let commandsOffset := calldataload(dataOffset)
            commands.offset := add(add(dataOffset, commandsOffset), 0x20)
            commands.length := calldataload(add(dataOffset, commandsOffset))
        }
    }
}

// $ yarn test --match-contract UniswapAnalyserTest
