// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "forge-std/mocks/MockERC20.sol";
import {GMXAnalyser} from "@/knightSafeAnalyser/GMXAnalyser.sol";
import "../../contracts/controlCenter/ControlCenter.sol";

contract GMXAnalyserTest is Test {
    GMXAnalyser ksa;
    ControlCenter controlCenter;
    address mockAddress = address(0x10001); // any address
    address mockNative = address(0x1111111); // any address

    function setUp() public {
        ksa = new GMXAnalyser(mockNative, mockAddress, msg.sender);
        controlCenter = new ControlCenter(address(this));
        IControlCenter(controlCenter).addOfficialAnalyser(address(ksa), "version1");

        assertEq(IControlCenter(controlCenter).isOfficialAnalyser(address(ksa)), true);
    }

    // function test_function() public {
    //     // solhint-disable-next-line
    //     bytes memory data =
    //         hex"ac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000447d39aaf100000000000000000000000031ef83a530fde1b38ee9a18093a333d8bbbc40d500000000000000000000000000000000000000000000000000004cc2e841e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064e6d66ac8000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000031ef83a530fde1b38ee9a18093a333d8bbbc40d500000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c44a393a41000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004cc2e841e9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000103d242d643e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077e424455dd3b0ad70ce3a0bf68e0c6a33b4b2ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000063dc80ee90f26363b3fcd609007cc9e14c8991be00000000000000000000000000000000000000000000000000000000";

    //     (address[] memory addrList, uint256[] memory valueList) = ksa.extractAddressesWithValue(mockAddress, data);

    //     for (uint256 i = 0; i < addrList.length; i++) {
    //         console.log("addrList[", i, "]: ", addrList[i]);
    //         console.log("valueList[", i, "]: ", valueList[i]);
    //     }
    // }

    // function test_function1() public {
    //     // solhint-disable-next-line
    //     bytes memory data =
    //         hex"ac9650d800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000447d39aaf100000000000000000000000031ef83a530fde1b38ee9a18093a333d8bbbc40d500000000000000000000000000000000000000000000000000004cc2e841e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064e6d66ac8000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000031ef83a530fde1b38ee9a18093a333d8bbbc40d500000000000000000000000000000000000000000000000000000000002dc6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a44a393a41000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000025d7b71ebdfcbd0c66c090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c79a33e068a0700000000000000000000000000000000000000000000000000004cc2e841e900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077e424455dd3b0ad70ce3a0bf68e0c6a33b4b2ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ff0000000000000000000000000000000000000100000000000000000000000070d95587d40a2caf56bd97485ab3eec10bee6336000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e583100000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    //     (address[] memory addrList, uint256[] memory valueList) = ksa.extractAddressesWithValue(mockAddress, data);

    //     for (uint256 i = 0; i < addrList.length; i++) {
    //         console.log("addrList[", i, "]: ", addrList[i]);
    //         console.log("valueList[", i, "]: ", valueList[i]);
    //     }
    // }
}

// $ yarn test --match-contract GMXAnalyserTest
